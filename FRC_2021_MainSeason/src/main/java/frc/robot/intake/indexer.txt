public class indexer {
    
    // Maintains the front sensor
    frontSensor;

    // Maintains the back sensor
    backSensor;

    // Maintains the addressable LED
    m_ledBUffer;

    // Maintains the color of the ball in the front sensor
    public ballColor frontSensorColor;

    // Maintains the color of the ball in the back sensor
    public ballColor backSensorColor;

    // Mantains the deepest ball
    public ballColor deepestBallColor;

    // Mantains if a ball has been enqueued
    public boolean enqueued;

    // Mantains a timer
    public Timer timer;

    // Creates the color frontSensor
    public void frontSensorCreator {
        
    }

    // Creates the color backSensor
    public void backSensorCreator {
        
    }

    @Override
    // Operates the back color sensor
    public void frontSensor() {
        Color frontColor = frontSensor.getColor();
        if(frontColor == green) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, green color statistics);
            }
            outputToDriverStation("No ball");
            frontSensorColor = empty;
        }
        if(frontColor == red) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, red color statistics);
            }
            outputToDriverStation("Color is red");
            frontSensorColor = red;
        }
        if(frontColor == blue) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, blue color statistics);
            }
            outputToDriverStation("Color is blue");
            frontSensorColor = blue;
        }
    }

    @Override
    // Operates the back color sensor
    public void backSensor() {
        Color backColor = backSensor.getColor();
        if(backColor == green) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, green color statistics);
            }
            outputToDriverStation("No ball");
            backSensorColor = empty;
        }
        if(backColor == red) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, red color statistics);
            }
            outputToDriverStation("Color is red");
            backSensorColor = red;
            // if only one can be admitted 
            deepestBallColor = red;
            timer.startTimer;
        }
        if(backColor == blue) {
            for(int i = 0; i < m_ledBuffer.getLength() / 2; i++) {
                m_ledBuffer.setHSV(i, blue color statistics);
            }
            outputToDriverStation("Color is blue");
            backSensorColor = blue;
            // if only one can be admitted 
            deepestBallColor = red;
            timer.startTimer
        }
    }

    // Sets the indexer motor power
    public void indexerMotor {
        Motor.power == 50;
    }

    // Detects spikes in the indexer motor
    public void indexerMotorSpike {
        if((firstStart == false) && (motorPower ? testValue)) {
            Motor.power = 50;
        }
    }

    @Override
    public void enqueued {
        if((timer >= (distance / velocity)) && (takenToTurret == false)) {
            enqueued = true;
            timer = 0;
        }
        if(takenToTurret = true) {
            takenToTurret = false;
            enqueued = false;
        }
    }
}

// next queue pose

// first motor and tuninf are motor effective tuned constants
kfeed forward, fp for pid, and store constants in final, k